message Game
{
	required int32 	 round = 1; // current round for the game
	required int32   max_round = 2; // total round for this game
	
	message PlayerTemp
	{
		required int32 player_id = 1; 
		required int32 in_attack = 2; 
		required int32 out_attack = 3;
		required int32 in_defense = 4;
		required int32 out_defense = 5;
		required int32 assist_rate = 6;
		required int32 co_defense = 7;
		required int32 attack_way = 21;
		required int32 foul_trend = 22;
		required int32 free_throw_rate = 23;
		required int32 rebound_rate = 24;

		required int32 points = 8;
		required int32 two_point_shot = 9;
		required int32 two_point_bingo = 10;
		required int32 three_point_shot = 11;
		required int32 three_point_bingo = 12;
		required int32 free_throw = 13;
		required int32 free_throw_bingo = 14;
		required int32 rebounds = 15;
		required int32 assists = 16;
		required int32 steals = 17;
		required int32 blocks = 18;
		required int32 fouls = 19;
		
		required int32 prop = 20;
		optional int32 left_round = 25;
	
		optional int32 position = 26;

		repeated int32 buffs = 27;
	}

	required int32 host = 3;
	required int32 guest = 4;
	required int32 host_points = 5;
	required int32 guest_points = 6;
	required int32 host_attack_tactic = 7;
	required int32 host_defense_tactic = 8;
	required int32 guest_attack_tactic = 9;
	required int32 guest_defense_tactic = 10;
	repeated PlayerTemp host_players = 11;
	repeated PlayerTemp guest_players= 12;

	required int32 host_rebound = 13;
	required int32 guest_rebound = 14;
}

message GameOneRoundResult
{
	required int32 round = 1;  // current round num
	required int32 attacker = 2; // attacker ID
	required int32 defender = 3; // defender ID
	required int32 a_assist = 4; // attacker assist player id
	required int32 a_foul = 5; // attacker faul player id, if any
	required int32 d_foul = 6; // defender faul player id, if any
	required int32 a_rebound = 7; // attacker reboudd player id
	required int32 d_rebound = 8; // defender rebound player id
	required int32 d_block = 9; // defense block player id;
	required int32 a_point = 10; // attacker points, 2, 3, 
								// three throws, 12 for three of three throws
	required int32 a_pointer = 11; // attacker pointer
	required int32 d_point = 12; // defender points
	required int32 d_pointer = 13; // defender pointer
	required int32 a_miss = 14; // attacker miss
	required int32 d_miss = 15; // defender miss
	required int32 a_steal = 16; 
	required int32 d_steal = 17;
	
	required int32 result = 18;

	required int32 a_fthrow = 19;
	required int32 a_fthrow_bingo = 20;
	required int32 a_way = 21;
	required int32 d_way = 22;
	required int32 da_way = 23;
	required int32 a_2way = 24;
	required int32 sub_round = 25;

	optional int32 match_id = 26;
	optional int32 a_prop = 27;
	optional int32 d_prop = 28;
	optional int32 d_codefender = 29;

	repeated int32 a_buff = 30;
	repeated int32 d_buff = 31;
}

message GameBasicSet
{
	required int32 uid = 1;
	required int32 attack_tatic = 2;
	required int32 defense_tatic = 3;
	message GamePlayerSet
	{
		required int32 player_id = 1;
		required int32 prop_id = 2;
	}
	repeated GamePlayerSet players = 4;
	required int32 match_id = 5;
	required int32 round = 6;
}

message PlayerAbility
{
	required int32 player_id = 1;
	required int32 field_goal = 2;
	required int32 three_point = 3;
	required int32 out_defense = 4;
	required int32 in_defense = 5;
	required int32 co_defense = 6;
	required int32 foul_trend = 7;
	required int32 free_throw = 8;
	required int32 attack_way = 9;    //chose field goal probability
	required int32 assist = 10;
	optional int32 max_round = 11;
	optional int32 level = 12;
	optional int32 position = 13;
	repeated int32 buffs = 14;
}

message Players
{
	required int32 uid = 1;

	message Buffer
	{
		required int32 buff_id = 1;
		required int32 active = 2;
	}

	message Player
	{
		required int32 player_id = 1;
		repeated Buffer buffs = 2;
		required int32 active = 3;  
		optional int32 ability_rate = 4;   //normal 100, other multiply, then divide 100;
		optional int32 position = 5;
		optional int32 first = 6;
	}

	repeated Player players = 2;

	repeated int32 on_court = 3;
}

message GameInitResult
{
	required int32 uid = 1;
	required int32 opponent = 2;
	required int32 attack = 3;
}

message GameResults
{
	required int32 uid = 1;
	required int32 points = 2;
	required int32 opponent_points = 3;
	
	message PlayerStatis
	{
		required int32 points = 1;
		required int32 two_point_shot = 2;
		required int32 two_point_bingo = 3;
		required int32 three_point_shot = 4;
		required int32 three_point_bingo = 5;
		required int32 free_throw = 6;
		required int32 free_throw_bingo = 7;
		required int32 rebounds = 8;
		required int32 assists = 9;
		required int32 steals = 10;
		required int32 blocks = 11;
		required int32 fouls = 12;
		required int32 player_id = 13;
	}

	repeated PlayerStatis self_statis = 4;
	repeated PlayerStatis opponent_statis = 5;
}

message ChangePlayers
{
	required int32 uid = 1;

	message CPlayer
	{
		optional int32 player_id = 1;
		optional int32 active = 2;
		optional int32 position = 3;
		optional int32 first = 4;
	}

	repeated CPlayer players = 2;
}

message Buff
{
	required int32 id = 1;
	optional int32 buff_range = 2;
	optional int32 effect = 3;
	optional int32 opt = 4;
	optional int32 value = 5;
	optional int32 rate = 6;
	optional int32 buff_type = 7;
}
